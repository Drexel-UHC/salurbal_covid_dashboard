setwd("C:/Users/ranli/Desktop/Git local/SALURBAL_Covid19 Git Internal/Data")
rm(list=ls())
options(timeout=7200)
source("code_salurbal_data_updater_util.R")

#### ********************************************* ####
# 2. Country Level  ------- 
#### 2.1 - Get Raw Data (full_raw, full)####
## Get Data from Github
raw_count  = fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv") %>% 
  as_tibble()
raw_deaths =  fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv") %>% 
  as_tibble()
## Clean counts and deaths
counts = clean_cum_csse(raw_count,"confirmed");deaths= clean_cum_csse(raw_deaths,"deaths")
## Countries of Interest
countries_references = get_ref_countries(counts,10)
countries_interest =  c(countries_salurbal,other_lac_countries,countries_references)
# Prepare Color Pallete
df.color = lac_colors()
# Country Centroid coordinates  
country_coords = fread("helper_files/country_google_cord.csv") %>% as_tibble() %>% 
  filter(!loc%in%c("Diamond Princess",
                   "Georgia",
                   "Holy See","Togo")) 

## Add country coordinates and color  
full_all_raw  = full_join(counts,deaths, by = c("loc","date")) %>% 
  left_join(df.color, by = "loc") %>% 
  left_join(country_coords) %>% 
  mutate(date_label = paste(lubridate::month(date,label=T, abbr = T),",",day(date))) 


full_all= full_all_raw%>% 
  filter(!is.na(lng))


all_dates_tmp = full_all %>% 
  select(date, date_label) %>% 
  distinct() %>% 
  arrange(date)
n_weeks_tmp =floor( nrow(all_dates_tmp)/7)
n_months_tmp =floor( nrow(all_dates_tmp)/30)
rows_tmp =  rev(nrow(all_dates_tmp)-seq(0,(n_months_tmp*30),by =30))
subset_dates_tmp = all_dates_tmp %>% 
  slice(rows_tmp) %>% 
  pull(date)
map_global_totals = full_all_raw %>% group_by(date) %>% 
  summarize(confirmed  = sum(confirmed),
            deaths = sum(deaths)) %>% 
  ungroup() %>% 
  filter(date%in%subset_dates_tmp)


map_daily_data = full_all  %>% 
  filter(!loc%in%c("Burma","Kosovo","Moldova","West Bank and Gaza") )%>% 
  left_join(pop_df %>% filter(level == "country") %>% select(-level) %>% 
              mutate(loc = case_when(
                loc=="Brunei Darussalam" ~"Brunei",
                loc == "Congo" ~ "Congo (Brazzaville)",
                loc == "Democratic Republic of the Congo" ~ "Congo (Kinshasa)",
                loc == "C?te d'Ivoire" ~ "Cote d'Ivoire",
                loc == "Republic of Korea" ~ "Korea, South",
                loc == "Syrian Arab Republic" ~ "Syria",
                loc == "China, Taiwan Province of China" ~ "Taiwan*",
                loc == "Viet Nam" ~ "Vietnam",
                loc == "United Republic of Tanzania" ~ "Tanzania",
                loc == "Lao People's Democratic Republic" ~ "Laos",
                TRUE~loc
              ))) %>% 
  select(-colors,-size) %>% 
  mutate(confirmed_rate = (confirmed/pop)*10^6,
         deaths_rate = (deaths/pop)*10^7 ) %>% 
  pivot_longer(cols=c(confirmed,deaths,confirmed_rate,deaths_rate),
               names_to = "rate",
               values_to = "n") %>% 
  mutate(n = as.integer(n))

max_radius = 40
min_radius = 2
map_daily_radius = map_daily_data %>% 
  filter(date == max(date)) %>% 
  filter(loc!="San Marino") %>% 
  group_by(date,rate) %>% 
  top_n(1,n) %>% 
  mutate(radius_factor = log(n)/log(max_radius)) %>% 
  ungroup() %>% 
  select(rate,radius_factor )

map_daily_data = map_daily_data %>% 
  filter(loc!="San Marino")%>% 
  filter(n>0) %>% 
  mutate(log_n = log10(n)) %>% 
  left_join(map_daily_radius)%>% 
  mutate(radius = (n)^(1/radius_factor)) %>% 
  mutate(radius =ifelse(radius<min_radius,min_radius,radius)) %>% 
  filter(date%in%subset_dates_tmp)


full =  full_all %>%  filter(loc%in%countries_interest) %>% 
  mutate(level = 'country', country ="Global") %>% 
  left_join(pop_df %>% filter(level == "country") %>% select(-level)) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))  
####  2.2 - Cumulative Cases (df.c) ####
df.c.country_counts = full %>% 
  select(-c(pop,confirmed_rate,deaths_rate)) %>% 
  group_by(loc) %>% 
  mutate(maxc = max(confirmed)) %>% 
  ungroup() %>% 
  filter(maxc >minc) %>% 
  select(-maxc) %>% 
  group_by(loc) %>% 
  group_modify(~{
    .x<-.x %>% filter(confirmed>0)
    mindate<-.x %>% filter(confirmed>=minc) %>% slice(1) %>% pull(date)
    .x<-.x %>% 
      mutate(days.since.100=date-mindate) %>% 
      mutate(lastday = ifelse(date == max(date),1,0))
  }) %>% 
  ungroup() %>% 
  left_join(df.color) %>% 
  mutate(country = "Global", level = "country", rate = "count")

df.c.country_rate = full %>% 
  select(-confirmed,-deaths,-deaths_rate) %>% 
  rename(confirmed = confirmed_rate) %>% 
  group_by(loc) %>% 
  mutate(maxr = max(confirmed)) %>% 
  ungroup() %>% 
  filter(maxr >minr) %>% 
  select(-maxr) %>% 
  group_by(loc) %>% 
  group_modify(~{
    .x<-.x %>% filter(confirmed>0)
    mindate<-.x %>% filter(confirmed>=minr) %>% slice(1) %>% pull(date)
    .x<-.x %>% 
      mutate(days.since.100=date-mindate) %>% 
      mutate(lastday = ifelse(date == max(date),1,0))
  }) %>% 
  ungroup() %>% 
  left_join(df.color) %>% 
  mutate(country = "Global", level = "country", rate = "rate") 

df.c.country = list(df.c.country_counts,df.c.country_rate) %>% bind_rows()
####  2.3 - Cumulative Deaths (df.d) ####
df.d.country_count  = full %>% 
  select(-c(pop,confirmed_rate,deaths_rate))  %>% 
  group_by(loc) %>% 
  mutate(maxd = max(deaths)) %>% 
  ungroup() %>% 
  filter(maxd >mind) %>% 
  select(-maxd) %>% 
  group_by(loc) %>% 
  group_modify(~{
    .x<-.x %>% filter(deaths>0)
    mindate<-.x %>% filter(deaths>=mind) %>% slice(1) %>% pull(date)
    .x<-.x %>% 
      mutate(days.since.10=date-mindate) %>% 
      mutate(lastday = ifelse(date == max(date),1,0))
  }) %>% 
  ungroup() %>% 
  left_join(df.color)%>% 
  mutate(country = "Global", level = "country", rate = "count")

df.d.country_rate  = full %>% 
  select(-c(confirmed,deaths,confirmed_rate))  %>% 
  rename(deaths = deaths_rate) %>% 
  group_by(loc) %>% 
  mutate(maxr = max(deaths)) %>% 
  ungroup() %>% 
  filter(maxr >minr) %>% 
  select(-maxr) %>% 
  group_by(loc) %>% 
  group_modify(~{
    .x<-.x %>% filter(deaths>0)
    mindate<-.x %>% filter(deaths>=minr) %>% slice(1) %>% pull(date)
    .x<-.x %>% 
      mutate(days.since.10=date-mindate) %>% 
      mutate(lastday = ifelse(date == max(date),1,0))
  }) %>% 
  ungroup() %>% 
  left_join(df.color)%>% 
  mutate(country = "Global", level = "country", rate = "rate")

df.d.country = list(df.d.country_count,df.d.country_rate) %>% bind_rows()

#### 2.5 - National level last 15 days (full_15days) ####
full_15days = full %>% 
  group_by(loc) %>% 
  group_modify(~{
    .x %>% 
      arrange(desc(date)) %>% 
      slice(1:15) %>% 
      arrange(date)
  }) %>% 
  rename(confirm.daily=confirmed, 
         deaths.daily = deaths,
         confirm.daily_rate=confirmed_rate, 
         deaths.daily_rate = deaths_rate) %>% 
  arrange(loc,date) %>% 
  mutate(
    month_labels = month(date, label = T,abbr = T) %>% as.character(),
    date_labels = day(date),
    last_15_labels = paste0(month_labels, ", ",date_labels ),
    confirm.labels = paste0(last_15_labels," <br /> ",format(confirm.daily,big.mark=",") ),
    deaths.labels = paste0(last_15_labels," <br /> ",format(deaths.daily,big.mark=",") ),
    confirm_rate.labels = paste0(last_15_labels," <br /> ",format(confirm.daily_rate,big.mark=",") ),
    deaths_rate.labels = paste0(last_15_labels," <br /> ",format(deaths.daily_rate,big.mark=",") )
  ) %>% 
  select(loc, confirm.daily, deaths.daily, confirm.daily_rate,deaths.daily_rate,
         confirm.labels,deaths.labels,confirm_rate.labels,deaths_rate.labels)

#### 2.6 - National level Sparkline  (dt1_global) ####
dt1_global_national =  full %>% 
  filter(date == max(full$date)) %>% 
  arrange(desc(confirmed)) %>% 
  select(-date) %>% 
  full_join(full_15days) %>% 
  group_by(loc) %>% 
  summarize(Deaths = unique(deaths) ,
            Confirmed = unique(confirmed),
            "Death Rate" = unique(deaths_rate),
            "Confirmed Rate" = unique(confirmed_rate),
            spark_counts = spk_chr(confirm.daily, type = 'bar',width = 80,height = 20,
                                   chartRangeMin=0,
                                   tooltipFormatter=spk_tool(confirm.labels)),
            spark_deaths = spk_chr(deaths.daily, type = 'bar',width = 80,height = 20,
                                   chartRangeMin=0,
                                   tooltipFormatter=spk_tool(deaths.labels)),
            spark_counts_rate = spk_chr(confirm.daily_rate, type = 'bar',width = 80,height = 20,
                                        chartRangeMin=0,
                                        tooltipFormatter=spk_tool(confirm_rate.labels)),
            spark_deaths_rate = spk_chr(deaths.daily_rate, type = 'bar',width = 80,height = 20,
                                        chartRangeMin=0,
                                        tooltipFormatter=spk_tool(deaths_rate.labels))
  ) %>% 
  rename(Country = loc) %>% 
  ungroup()%>% 
  arrange(desc(Confirmed)) %>% 
  rename(loc = Country ) %>% 
  mutate(country = "Global",level = "country")


#### 2.7 National level Daily ####

## deaths and confirmed data
tidy.daily.country = 
  list(7) %>% 
  map_df(function(x){
    clean_daily_csse(counts, deaths,lock.dates.country,x) %>% 
      mutate(smooth_days = x)
  })  %>% 
  select(-smooth_days) %>% 
  left_join(  pop_df %>% 
                filter(level == "country")  )  %>% 
  mutate(rate = (rollsum/pop)*10^6 )%>% 
  select(-pop) %>% 
  mutate(country = "global")
  


## Icon Helper for which countries have lockdowns. 
helper1  = tidy.daily.country %>% select(loc, start) %>% distinct()
helper2 = tibble(loc = c(countries_salurbal,LAC = other_lac_countries) ) %>% 
  left_join(helper1) %>% 
  mutate(icon = ifelse(is.na(start),"glyphicon-cog","glyphicon-alert"))


#### ********************************************* ####

#### 3. Brazil   ####

#### 3.1 - Get Raw Data (full_br_l1,full_br_l2) ####
load("helper_files/xwalk_BR_states.rdata")
raw_br_state  = fread("https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-states.csv") %>%
  as_tibble() %>% #stringi::stri_trans_general(.x, "Latin-ASCII")
  select(date,
         loc = state,
         confirmed = totalCases,
         deaths) %>%
  mutate(country = "Brazil",
         date = ymd(date)) %>%
  filter(loc != "TOTAL") %>%
  left_join(df.color) %>%
  group_by(date, loc, country) %>%
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>%
  left_join(xwalk.brazil.states, by = c("loc"="state")) %>%
  select(date, loc = state.name, country, confirmed, deaths) %>%
  mutate(level = "state") 

raw_br_mun  = fread("https://raw.githubusercontent.com/wcota/covid19br/master/cases-brazil-cities-time.csv") %>% 
  as_tibble() %>% 
  filter(ibgeID != "0") %>% 
  filter(!str_detect(string = city, pattern = "INDEFINIDA")) %>% 
  filter(nchar(ibgeID)>3) %>% 
  select(date,
         mun = ibgeID,
         confirmed = totalCases,
         deaths) %>%
  mutate(country = "Brazil",
         date = ymd(date),
         mun = as.character(mun)) %>% 
  mutate_if(is.character,~stringi::stri_trans_general(.x, "Latin-ASCII"))%>% ungroup() %>% 
  arrange(mun, date)

raw_br_l1 = raw_br_mun %>% 
  left_join(select(xwalk_sal_br,mun, salid1, salid1_name )) %>%  
  mutate(level = "L1") %>% 
  group_by(date, level,salid1, salid1_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid1_name = ifelse(is.na(salid1),
                              "Brazil Non-salurbal",
                              salid1_name),
         salid1 = ifelse(is.na(salid1),
                         paste0("BR","888"),
                         salid1))%>% ungroup() %>% 
  rename(loc = salid1_name) %>% 
  left_join(pop_df %>% filter(level == "L1") %>% select(-level), 
            by = c("salid1"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))  %>% 
  arrange(loc, date)

raw_br_l2 = raw_br_mun %>% 
  left_join(select(xwalk_sal_br,mun, salid2, salid2_name, )) %>%
  mutate(level = "L2") %>% 
  group_by(date,level, salid2, salid2_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid2_name = ifelse(is.na(salid2),
                              "Brazil Non-salurbal",
                              salid2_name),
         salid2 = ifelse(is.na(salid2),
                         paste0("BR","888"),
                         salid2))%>% ungroup() %>% 
  rename(loc = salid2_name)%>% 
  left_join(pop_df %>% filter(level == "L2") %>% select(-level), 
            by = c("salid2"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))  %>% 
  arrange(loc, date)


# Prepare Color Pallete
df.color.br.state = expand_colors_df(raw_br_state, "Dark2")%>% ungroup()
df.color.br.l1  = expand_colors_df(raw_br_l1, "Dark2")%>% ungroup()
df.color.br.l2  = expand_colors_df(raw_br_l2, "Dark2")%>% ungroup()

# Add color information 
full_br_state = raw_br_state %>% left_join(df.color.br.state)%>% arrange(loc,date) %>% ungroup() 
full_br_l1 = raw_br_l1 %>% left_join(df.color.br.l1)%>% arrange(salid1,date) %>% ungroup() 
full_br_l2 = raw_br_l2 %>% left_join(df.color.br.l2)%>% arrange(salid2,date) %>% ungroup()

#### 3.2 - Get cumulative Cases (df.c.br.l1,df.c.br.l2) ####
df.c.br.state = clean_salurbal_cumulative_cases(full_br_state,df.color.br.state)
df.c.br.l1 = clean_salurbal_cumulative_cases_with_rates(full_br_l1,df.color.br.l1) %>% ungroup()
df.c.br.l2 = clean_salurbal_cumulative_cases_with_rates(full_br_l2,df.color.br.l2) %>% ungroup()

#### 3.3 - Get cumulative Deaths (df.d.br.l1,df.d.br.l2) ####
df.d.br.state = clean_salurbal_cumulative_deaths(full_br_state,df.color.br.state)
df.d.br.l1 = clean_salurbal_cumulative_deaths_with_rates(full_br_l1,df.color.br.l1)%>% ungroup()
df.d.br.l2 = clean_salurbal_cumulative_deaths_with_rates(full_br_l2,df.color.br.l2)%>% ungroup()

#### 3.4 - Brazil Sparkline (dt1_global_br) ####
dt1_global_br_state =  clean_salurbal_sparkline(full_br_state)%>% ungroup() %>% mutate(level = "state")
dt1_global_br_l1 =  clean_salurbal_sparkline_with_rates(full_br_l1)%>% ungroup()%>% mutate(level = "L1")
dt1_global_br_l2 =  clean_salurbal_sparkline_with_rates(full_br_l2)%>% ungroup()%>% mutate(level = "L2")

#### 3.6 - Brazil Daily #####
tidy.daily.br.state = clean_daily_salurbal_smooth(full_br_state) %>% ungroup() %>% mutate(level = "state")
tidy.daily.br.l1 = clean_daily_salurbal_smooth(full_br_l1)%>% ungroup()%>% mutate(level = "L1")
tidy.daily.br.l2 = clean_daily_salurbal_smooth(full_br_l2)%>% ungroup()%>% mutate(level = "L2")


#### ********************************************* ####
#### 4. Mexico  ####
#### 4.1 Get raw Data ####
## State Level
url_mx_deaths = "https://raw.githubusercontent.com/mexicovid19/Mexico-datos/master/datos/series_de_tiempo/covid19_mex_muertes.csv"
url_mx_cases = "https://raw.githubusercontent.com/mexicovid19/Mexico-datos/master/datos/series_de_tiempo/covid19_mex_casos_totales.csv"
mx_state_cases_raw = fread(url_mx_cases) %>%
  as_tibble() %>% 
  pivot_longer(cols = -Fecha,names_to = "state", values_to = "confirmed") %>% 
  rename(date = Fecha) %>% 
  mutate(state = stringi::stri_trans_general(state, "Latin-ASCII") %>% str_trim())
mx_state_deaths_raw = fread(url_mx_deaths) %>%
  as_tibble()%>% 
  pivot_longer(cols = -Fecha,names_to = "state", values_to = "deaths") %>% 
  rename(date = Fecha) %>% 
  mutate(state = stringi::stri_trans_general(state, "Latin-ASCII") %>% str_trim())
raw_mx_state =mx_state_cases_raw %>% left_join(mx_state_deaths_raw) %>% 
  mutate(level = 'state',
         country = "Mexico",
         date = ymd(date)) %>% 
  filter(state != "Nacional") %>% 
  mutate(state = case_when(
    state=="Ciudad de MA(C)xico" ~ "Ciudad de Mexico",
    state=="QuerA(C)taro" ~ "Queretaro",
    state=="MA(C)xico" ~ "Mexico",
    state=="Nuevo LeA?n" ~ "Nuevo Leon",
    state=="YucatA?n" ~ "Yucatan",
    state=="San Luis PotosA-" ~ "San Luis Potosi",
    state=="MichoacA?n" ~ "Michoacan",
    TRUE ~ state
  )) %>% 
  rename(loc = state)


## Cases at Municipal Level
url =  "http://datosabiertos.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip"
# url =  "http://epidemiologia.salud.gob.mx/gobmx/salud/datos_abiertos/datos_abiertos_covid19.zip"
temp_mx = tempfile()
download.file(url,temp_mx,quiet=F,mode="wb",timeout=79200)
raw_mx_mun_confirmed  = data.table::fread( unzip(file.path(temp_mx))  ) %>% 
  as_tibble() %>% 
  select(FECHA_INGRESO,RESULTADO,ENTIDAD_RES,MUNICIPIO_RES) %>% 
  filter(RESULTADO==1) %>%
  clean_names() %>% 
  select(date = fecha_ingreso,ent =entidad_res, mun = municipio_res) %>% 
  mutate(ent = str_pad(ent, width = 2, pad = "0"),
         mun = str_pad(mun, width = 3, pad = "0"),
         mun = paste0(ent, mun)) %>% 
  select(-ent) %>% 
  group_by(date, mun) %>% 
  summarise(confirmed =n()) %>% 
  ungroup() %>% 
  mutate(date = ymd(date)) %>% 
  select(mun, date, confirmed) %>% 
  arrange(mun, date) 

raw_mx_mun_deaths = data.table::fread(unzip(file.path(temp_mx))) %>% as_tibble() %>% 
  select(FECHA_DEF,RESULTADO,ENTIDAD_RES,MUNICIPIO_RES) %>% 
  filter(RESULTADO==1)%>%
  filter(FECHA_DEF != "9999-99-99") %>% 
  select(date_death = FECHA_DEF,ent =ENTIDAD_RES, mun = MUNICIPIO_RES) %>% 
  mutate(ent = str_pad(ent, width = 2, pad = "0"),
         mun = str_pad(mun, width = 3, pad = "0"),
         mun = paste0(ent, mun)) %>% 
  select(-ent) %>% 
  group_by(date_death, mun) %>% 
  summarise(deaths =n()) %>% 
  ungroup() %>% 
  mutate(date = ymd(date_death)) %>% 
  select(mun, date, deaths) %>% 
  arrange(mun, date) 
delete_tmp = list.files()[list.files() %>% str_detect('COVID19MEXICO')]
file.remove(delete_tmp)

raw_mx_mun =full_join(raw_mx_mun_confirmed,raw_mx_mun_deaths) %>% 
  mutate_at(vars(confirmed, deaths), ~ifelse(is.na(.x),0,.x)) %>% 
  mutate(country = "Mexico") %>% 
  arrange(mun,date) %>% 
  group_by(mun) %>% 
  mutate(confirmed = cumsum(confirmed),
         deaths = cumsum(deaths)) %>% 
  ungroup()

raw_mx_l1 = raw_mx_mun  %>% 
  left_join(select(xwalk_sal_mx,mun, salid1, salid1_name )) %>%  
  group_by(country, salid1, salid1_name) %>%
  group_modify(function(x,...){
    all_dates = tibble(date = seq(min(x$date),max(x$date), by = '1 day'))
    x %>% 
      group_by(mun) %>% 
      group_modify(function(z,...){
        all_dates %>% left_join(z) %>% 
          fill(-date, .direction = "down") %>% 
          filter(!(is.na(confirmed)&is.na(deaths)))
      })
  }) %>% 
  ungroup() %>% 
  mutate(level = "L1") %>% 
  group_by(date, level,salid1, salid1_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid1_name = ifelse(is.na(salid1),
                              "Mexico Non-salurbal",
                              salid1_name),
         salid1 = ifelse(is.na(salid1),
                         paste0("MX","888"),
                         salid1))%>% ungroup() %>% 
  rename(loc = salid1_name) %>% 
  left_join(pop_df %>% filter(level == "L1") %>% select(-level), 
            by = c("salid1"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))  %>% 
  arrange(loc,date)

raw_mx_l2 = raw_mx_mun %>% 
  left_join(select(xwalk_sal_mx,mun, salid2, salid2_name )) %>%  
  group_by(country, salid2, salid2_name) %>%
  group_modify(function(x,...){
    all_dates = tibble(date = seq(min(x$date),max(x$date), by = '1 day'))
    x %>% 
      group_by(mun) %>% 
      group_modify(function(z,...){
        all_dates %>% left_join(z) %>% 
          fill(-date, .direction = "down") %>% 
          filter(!(is.na(confirmed)&is.na(deaths)))
      })
  }) %>% 
  ungroup() %>% 
  mutate(level = "L2") %>% 
  group_by(date,level, salid2, salid2_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid2_name = ifelse(is.na(salid2),
                              "Mexico Non-salurbal",
                              salid2_name),
         salid2 = ifelse(is.na(salid2),
                         paste0("MX","888"),
                         salid2))%>% ungroup() %>% 
  rename(loc = salid2_name)%>% 
  left_join(pop_df %>% filter(level == "L2") %>% select(-level), 
            by = c("salid2"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2)) %>% 
  arrange(loc, date)


# Prepare Color Pallete
df.color.mx.state = expand_colors_df(raw_mx_state, "Dark2")%>% ungroup()
df.color.mx.l1  = expand_colors_df(raw_mx_l1, "Dark2")%>% ungroup()
df.color.mx.l2  = expand_colors_df(raw_mx_l2, "Dark2")%>% ungroup()

# Add color information 
full_mx_state = raw_mx_state %>% left_join(df.color.mx.state)%>% arrange(loc,date) %>% ungroup()
full_mx_l1 = raw_mx_l1 %>% left_join(df.color.mx.l1)%>% arrange(salid1,date) %>% ungroup()
full_mx_l2 = raw_mx_l2 %>% left_join(df.color.mx.l2)%>% arrange(salid2,date) %>% ungroup()

#### 4.2 -  cumulative Cases (df.c.mx.l1,df.c.mx.l2) ####
df.c.mx.state = clean_salurbal_cumulative_cases(full_mx_state,df.color.mx.state)
df.c.mx.l1 = clean_salurbal_cumulative_cases_with_rates(full_mx_l1,df.color.mx.l1) %>% ungroup()
df.c.mx.l2 = clean_salurbal_cumulative_cases_with_rates(full_mx_l2,df.color.mx.l2) %>% ungroup()

#### 4.3 -  cumulative Deaths (df.d.mx.l1,df.d.mx.l2) ####
df.d.mx.state = clean_salurbal_cumulative_deaths(full_mx_state,df.color.mx.state)
df.d.mx.l1 = clean_salurbal_cumulative_deaths_with_rates(full_mx_l1,df.color.mx.l1)%>% ungroup()
df.d.mx.l2 = clean_salurbal_cumulative_deaths_with_rates(full_mx_l2,df.color.mx.l2)%>% ungroup()

#### 4.4 -  Sparkline (dt1_global_mx) ####
dt1_global_mx_state =  clean_salurbal_sparkline(full_mx_state)%>% ungroup() %>% mutate(level = "state")
dt1_global_mx_l1 =  clean_salurbal_sparkline_with_rates(full_mx_l1)%>% ungroup()%>% mutate(level = "L1")
dt1_global_mx_l2 =  clean_salurbal_sparkline_with_rates(full_mx_l2)%>% ungroup()%>% mutate(level = "L2")

#### 4.6 -  Daily #####
tidy.daily.mx.state = clean_daily_salurbal_smooth(full_mx_state) %>% ungroup() %>% mutate(level = "state")
tidy.daily.mx.l1 = clean_daily_salurbal_smooth(full_mx_l1)%>% ungroup()%>% mutate(level = "L1")
tidy.daily.mx.l2 = clean_daily_salurbal_smooth(full_mx_l2)%>% ungroup()%>% mutate(level = "L2")


#### ********************************************* ####
#### 5. Chile  ####

#### 5.1 Get raw Data ####

## Cases at Municipal Level
chile_raw_counts_url  = "https://raw.githubusercontent.com/MinCiencia/Datos-COVID19/master/output/producto1/Covid-19.csv"
chile_raw_deaths_url  = "https://github.com/MinCiencia/Datos-COVID19/raw/master/output/producto38/CasosFallecidosPorComuna_std.csv"

xwalk_state_cl = fread(chile_raw_counts_url) %>% as_tibble() %>% 
  select(state = Region, state_id = "Codigo region") %>% distinct() %>% 
  mutate(state_id = str_pad(state_id, width = 2, pad = "0")) %>% 
  mutate_if(is.character,~stringi::stri_trans_general(.x, "Latin-ASCII")) %>% 
  mutate(state = case_when(
    str_detect(state,"TarapacA") ~ "Tarapaca",
    str_detect(state,"Higgins") ~ "O'Higgins",
    state == "ValparaA-so" ~ "Valparaiso",
    state == "A'uble" ~ "Nuble",
    state == "BiobA-o" ~ "Biobio",
    state == "Los RA-os" ~ "Los Rios",
    state == "AysA(C)n" ~ "Aysen",
    TRUE~state)) %>% 
  mutate(state = str_to_lower(state)) %>% 
  mutate(state =  paste0(toupper(substr(state, 1, 1)), substr(state, 2, nchar(state))))



raw_cl_deaths_mun  =  fread(chile_raw_deaths_url) %>% 
  as_tibble() %>% 
  select(mun = "Codigo comuna",
         date = "Fecha",
         deaths = "Casos fallecidos") %>% 
  filter(!is.na(mun)) %>% 
  mutate(mun = str_pad(mun,5,"left","0"),
         date = lubridate::ymd(date)) 

raw_cl_mun = fread(chile_raw_counts_url) %>% as_tibble() %>% 
  select(-c(Tasa,Region,"Codigo region",Comuna, Poblacion)) %>% 
  rename(mun = "Codigo comuna") %>% 
  pivot_longer(cols = -mun) %>% 
  rename(date = name, confirmed = value) %>% 
  mutate(mun = str_pad(mun, width = 5, pad = "0"),
         date = lubridate::ymd(date)) %>% 
  select(mun, date, confirmed) %>% 
  arrange(mun, date) %>% 
  left_join(raw_cl_deaths_mun) %>% 
  left_join(xwalk_sal_cl) %>%
  fill(country) %>%
  fill(iso2c) %>%
  mutate(date = ymd(date),
         confirmed=as.integer(confirmed),
         deaths = as.integer(deaths)) %>%
  filter(!is.na(mun))

# 
# %>% 
#   mutate(deaths = ifelse(date<"2020-06-12",NA,deaths))

raw_cl_state = raw_cl_mun  %>% 
  select(mun, date, confirmed, deaths) %>% 
  mutate(level = "state",
         state_id = str_sub(mun, 1,2),
         country = "Chile") %>% 
  left_join(xwalk_state_cl) %>% 
  select(-state_id, - mun ) %>% 
  rename(loc = state) %>% 
  group_by(loc, date, country, level) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths, na.rm = T)) %>% 
  ungroup() %>% 
  select(date, loc, country,confirmed, deaths, level) %>% 
  arrange(loc, date)


raw_cl_l1 = raw_cl_mun  %>% 
  mutate(level = "L1") %>% 
  group_by(date, level,salid1, salid1_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths, na.rm = T)) %>% 
  ungroup() %>% 
  arrange(salid1_name,date) %>% 
  mutate(salid1_name = ifelse(is.na(salid1),
                              "Chile Non-salurbal",
                              salid1_name),
         salid1 = ifelse(is.na(salid1),
                         paste0("CL","888"),
                         salid1)) %>% 
  left_join(pop_df %>% filter(level == "L1") %>% select(-level), 
            by = c("salid1"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))   %>% 
  rename(loc = salid1_name)%>% 
  arrange(loc, date)

raw_cl_l2 = raw_cl_mun %>% 
  mutate(level = "L2") %>% 
  group_by(date, level,salid2, salid2_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths, na.rm = T)) %>% 
  ungroup() %>% 
  arrange(salid2_name,date) %>% 
  mutate(salid2_name = ifelse(is.na(salid2),
                              "Chile Non-salurbal",
                              salid2_name),
         salid2 = ifelse(is.na(salid2),
                         paste0("CL","888"),
                         salid2)) %>% 
  left_join(pop_df %>% filter(level == "L2") %>% select(-level), 
            by = c("salid2"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))   %>% 
  rename(loc = salid2_name)%>% 
  arrange(loc, date)



# Prepare Color Pallete
df.color.cl.state = expand_colors_df(raw_cl_state, "Dark2")%>% ungroup()
df.color.cl.l1  = expand_colors_df(raw_cl_l1, "Dark2")%>% ungroup()
df.color.cl.l2  = expand_colors_df(raw_cl_l2, "Dark2")%>% ungroup()

# Add color information 
full_cl_state = raw_cl_state %>% left_join(df.color.cl.state)%>% arrange(loc,date) %>% ungroup()
full_cl_l1 = raw_cl_l1 %>% left_join(df.color.cl.l1)%>% arrange(salid1,date) %>% ungroup()
full_cl_l2 = raw_cl_l2 %>% left_join(df.color.cl.l2)%>% arrange(salid2,date) %>% ungroup()

#### 5.2 -  cumulative Cases (df.c.cl.l1,df.c.cl.l2) ####
df.c.cl.state = clean_salurbal_cumulative_cases(mutate(full_cl_state, deaths_rate = 0, deaths = 0),df.color.cl.state) %>% ungroup()
df.c.cl.l1 = clean_salurbal_cumulative_cases_with_rates(mutate(full_cl_l1, deaths_rate = 0, deaths = 0),df.color.cl.l1) %>% ungroup()
df.c.cl.l2 = clean_salurbal_cumulative_cases_with_rates(mutate(full_cl_l2, deaths_rate = 0, deaths = 0),df.color.cl.l2) %>% ungroup()

#### 5.3 -  cumulative Deaths (df.d.cl.l1,df.d.cl.l2) ####
df.d.cl.state = clean_salurbal_cumulative_deaths(full_cl_state,df.color.cl.state)
df.d.cl.l1 = clean_salurbal_cumulative_deaths_with_rates(full_cl_l1,df.color.cl.l1)%>% ungroup()
df.d.cl.l2 = clean_salurbal_cumulative_deaths_with_rates(full_cl_l2,df.color.cl.l2)%>% ungroup()

#### 5.4 -  Sparkline (dt1_global_cl) ####
dt1_global_cl_state =  clean_salurbal_sparkline(full_cl_state)%>% ungroup() %>% mutate(level = "state")
dt1_global_cl_l1 =  clean_salurbal_sparkline_with_rates(full_cl_l1)%>% ungroup()%>% mutate(level = "L1")
dt1_global_cl_l2 =  clean_salurbal_sparkline_with_rates(full_cl_l2)%>% ungroup()%>% mutate(level = "L2")

#### 5.6 -  Daily #####
tidy.daily.cl.state = clean_daily_salurbal_smooth(full_cl_state) %>% ungroup() %>% mutate(level = "state")
tidy.daily.cl.l1 = clean_daily_salurbal(full_cl_l1,2)%>% ungroup()%>% mutate(level = "L1") %>% mutate(smooth_days =2)
tidy.daily.cl.l2 = clean_daily_salurbal(full_cl_l2,2)%>% ungroup()%>% mutate(level = "L2")%>% mutate(smooth_days =2)
#### ********************************************* ####

#### 6. Columbia  ####
xwalk_sal_co
#### 6.1 Get raw Data ####
colombia_url ="https://www.datos.gov.co/api/views/gt2j-8ykr/rows.csv?accessType=DOWNLOAD"
raw_co_mun_confirmed  = fread(colombia_url) %>% 
  as_tibble()%>%  
  clean_names() %>%
  select(date = contains("fecha_de_notifica"),
         mun = contains("divipola")) %>% 
  mutate(mun = str_pad(mun, width = 5, pad = "0")) %>% 
  mutate_if(is.character,~stringi::stri_trans_general(.x, "Latin-ASCII"))%>% 
  group_by(date, mun) %>% 
  summarise(confirmed =n()) %>% 
  ungroup() %>% 
  mutate(date = ymd(str_sub(date,1,10))) %>% 
  select(mun, date, confirmed) %>% 
  arrange(mun, date) %>% 
  filter(date>"2020-03-01")

raw_co_mun_deaths  = fread(colombia_url) %>% 
  as_tibble() %>%  
  clean_names() %>%
  select(date = contains("fecha_de_muer"),
         mun = contains("divipola")) %>% 
  mutate(mun = str_pad(mun, width = 5, pad = "0")) %>% 
  mutate_if(is.character,~stringi::stri_trans_general(.x, "Latin-ASCII")) %>% 
  filter(date!="-   -") %>% 
  filter(date != "") %>% 
  group_by(date, mun) %>% 
  summarise(deaths =n()) %>% 
  ungroup() %>% 
  mutate(date = ymd(str_sub(date,1,10))) %>% 
  select(mun, date, deaths) %>% 
  arrange(mun, date)  %>% 
  filter(date>"2020-03-01")

raw_co_mun =full_join(raw_co_mun_confirmed,raw_co_mun_deaths) %>% 
  mutate_at(vars(confirmed, deaths), ~ifelse(is.na(.x),0,.x)) %>% 
  mutate(country = "Colombia") %>% 
  arrange(mun,date) %>% 
  group_by(mun) %>% 
  mutate(confirmed = cumsum(confirmed),
         deaths = cumsum(deaths)) %>% 
  ungroup() %>% 
  filter(!is.na(date))


raw_co_l1 = raw_co_mun  %>% 
  left_join(select(xwalk_sal_co,mun, salid1, salid1_name )) %>%  
  group_by(country, salid1, salid1_name) %>%
  group_modify(function(x,...){
    all_dates = tibble(date = seq(min(x$date),max(x$date), by = '1 day'))
    x %>% 
      group_by(mun) %>% 
      group_modify(function(z,...){
        all_dates %>% left_join(z) %>% 
          fill(-date, .direction = "down") %>% 
          filter(!(is.na(confirmed)&is.na(deaths)))
      })
  }) %>% 
  ungroup() %>% 
  mutate(level = "L1") %>% 
  group_by(date, level,salid1, salid1_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid1_name = ifelse(is.na(salid1),
                              "Colombia Non-salurbal",
                              salid1_name),
         salid1 = ifelse(is.na(salid1),
                         paste0("CO","888"),
                         salid1))%>% ungroup() %>% 
  rename(loc = salid1_name) %>% 
  left_join(pop_df %>% filter(level == "L1") %>% select(-level), 
            by = c("salid1"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))  %>% 
  arrange(loc,date)

raw_co_l2 = raw_co_mun %>% 
  left_join(select(xwalk_sal_co,mun, salid2, salid2_name )) %>%  
  group_by(country, salid2, salid2_name) %>%
  group_modify(function(x,...){
    all_dates = tibble(date = seq(min(x$date),max(x$date), by = '1 day'))
    x %>% 
      group_by(mun) %>% 
      group_modify(function(z,...){
        all_dates %>% left_join(z) %>% 
          fill(-date, .direction = "down") %>% 
          filter(!(is.na(confirmed)&is.na(deaths)))
      })
  }) %>% 
  ungroup() %>% 
  mutate(level = "L2") %>% 
  group_by(date,level, salid2, salid2_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% ungroup() %>% 
  mutate(salid2_name = ifelse(is.na(salid2),
                              "Colombia Non-salurbal",
                              salid2_name),
         salid2 = ifelse(is.na(salid2),
                         paste0("CO","888"),
                         salid2))%>% ungroup() %>% 
  rename(loc = salid2_name)%>% 
  left_join(pop_df %>% filter(level == "L2") %>% select(-level), 
            by = c("salid2"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2)) %>% 
  arrange(loc, date)

# Prepare Color Pallete
# df.color.co.state = expand_colors_df(raw_co_state, "Dark2")%>% ungroup()
df.color.co.l1  = expand_colors_df(raw_co_l1, "Dark2")%>% ungroup()
df.color.co.l2  = expand_colors_df(raw_co_l2, "Dark2")%>% ungroup()

# Add color information 
# full_co_state = raw_co_state %>% left_join(df.color.co.state)%>% arrange(loc,date) %>% ungroup()
full_co_l1 = raw_co_l1 %>% left_join(df.color.co.l1)%>% arrange(salid1,date) %>% ungroup()
full_co_l2 = raw_co_l2 %>% left_join(df.color.co.l2)%>% arrange(salid2,date) %>% ungroup()

#### 6.2 -  cumulative Cases (df.c.co.l1,df.c.co.l2) ####
#df.c.co.state = clean_salurbal_cumulative_cases(full_co_state,df.color.co.state)
df.c.co.l1 = clean_salurbal_cumulative_cases_with_rates(full_co_l1,df.color.co.l1) %>% ungroup()
df.c.co.l2 = clean_salurbal_cumulative_cases_with_rates(full_co_l2,df.color.co.l2) %>% ungroup()
#### 6.3 -  cumulative Deaths (df.d.co.l1,df.d.co.l2) ####
#df.d.co.state = clean_salurbal_cumulative_deaths(full_co_state,df.color.co.state)
df.d.co.l1 = clean_salurbal_cumulative_deaths_with_rates(full_co_l1,df.color.co.l1)%>% ungroup()
df.d.co.l2 = clean_salurbal_cumulative_deaths_with_rates(full_co_l2,df.color.co.l2)%>% ungroup()
#### 6.4 -  Sparkline (dt1_global_co) ####
#dt1_global_co_state =  clean_salurbal_sparkline(full_co_state)%>% ungroup() %>% mutate(level = "state")
dt1_global_co_l1 =  clean_salurbal_sparkline_with_rates(full_co_l1)%>% ungroup()%>% mutate(level = "L1")
dt1_global_co_l2 =  clean_salurbal_sparkline_with_rates(full_co_l2)%>% ungroup()%>% mutate(level = "L2")

#### 6.6 -  Daily #####
#tidy.daily.co.state = clean_daily_salurbal_smooth(full_co_state) %>% ungroup() %>% mutate(level = "state")
tidy.daily.co.l1 = clean_daily_salurbal_smooth(full_co_l1)%>% ungroup()%>% mutate(level = "L1")
tidy.daily.co.l2 = clean_daily_salurbal_smooth(full_co_l2)%>% ungroup()%>% mutate(level = "L2")


#### ********************************************* ####
#### 7. Peru (Micro) ####

#### 7.1 -  Get raw data  #####
##Clean mun name to mun id xwalk 
library(foreign)
xwalk_peru_mun = read.dbf("helper_files/peru_distritos.dbf") %>% as_tibble() %>% 
  clean_names() %>% 
  select(state = nombdep , 
         mun = nombdist,
         mun_id = iddist) %>% 
  mutate_all(~stringi::stri_trans_general(.x, "Latin-ASCII")) %>% 
  group_by(mun_id ) %>% 
  mutate(mun = str_replace(mun,"A'","N")) %>% 
  ungroup() 


## Download Data
url_peru_cases = "https://cloud.minsa.gob.pe/s/Y8w3wHsEdYQSZRp/download"
url_peru_deaths = "https://cloud.minsa.gob.pe/s/Md37cjXmjT9qYSa/download"
peru_mun_cases_raw = fread(url_peru_cases) %>% as_tibble()%>% 
  filter(METODODX=="PCR") %>% 
  filter(DISTRITO!="EN INVESTIGACIÓN") %>% 
  select(date = FECHA_RESULTADO,
         state = DEPARTAMENTO,
         mun = DISTRITO) %>% 
  mutate(state = ifelse(state == "LIMA REGION","LIMA",state))%>% 
  mutate_all(~stringi::stri_trans_general(.x, "Latin-ASCII")) %>% 
  mutate(mun = 
           case_when(mun == "CORONEL GREGORIO ALBARRACIN L."~"CORONEL GREGORIO ALBARRACIN LANCHIPA",
                     mun == "PANGOA"~"MAZAMARI - PANGOA",
                     mun == "MAZAMARI"~"MAZAMARI - PANGOA",
                     mun == "NAZCA"~"NASCA",
                     mun == "ANDRES AVELINO CACERES D."~"ANDRES AVELINO CACERES DORREGARAY",
                     TRUE~mun
           )
  ) %>% left_join(xwalk_peru_mun)

peru_mun_cases = peru_mun_cases_raw %>% 
  count(state,date, mun_id, name = "confirmed")

peru_mun_deaths_raw = fread(url_peru_deaths) %>% as_tibble()%>% 
  filter(DISTRITO!="EN INVESTIGACIÓN") %>% 
  filter(DISTRITO!="") %>% 
  select(date = FECHA_FALLECIMIENTO,
         state = DEPARTAMENTO,
         mun = DISTRITO) %>% 
  mutate(state = ifelse(state == "LIMA REGION","LIMA",state))%>% 
  mutate_all(~stringi::stri_trans_general(.x, "Latin-ASCII")) %>% 
  mutate(mun = 
           case_when(mun == "CORONEL GREGORIO ALBARRACIN L."~"CORONEL GREGORIO ALBARRACIN LANCHIPA",
                     mun == "PANGOA"~"MAZAMARI - PANGOA",
                     mun == "MAZAMARI"~"MAZAMARI - PANGOA",
                     mun == "NAZCA"~"NASCA",
                     mun == "ANDRES AVELINO CACERES D."~"ANDRES AVELINO CACERES DORREGARAY",
                     mun == "CAMPOREDONDO"~"CAMPORREDONDO",
                     mun == "GUADALUPITO"~"NASCA",
                     mun == "CHEP+N"~"CHEPEN",
                     mun == "CARMEN DE LA LEGUA-REYNOSO"~"CARMEN DE LA LEGUA REYNOSO",
                     mun == "VIR+"~"VIRU",
                     mun == "ANDRES AVELINO CACERES DORREGA"~"ANDRES AVELINO CACERES DORREGARAY",
                     mun == "NAZCA"~"NASCA",
                     mun == "NAZCA"~"NASCA",
                     
                     TRUE~mun
           )
  ) %>% 
  mutate(state = 
           case_when(mun == "GUADALUPITO" ~ "LA LIBERTAD",
                     mun == "HUARAL"~"LIMA",
                     mun == "NASCA"~"ICA",
                     
                     
                     TRUE ~ state
                     
           )) %>% 
  left_join(xwalk_peru_mun) %>% 
  filter(!is.na(mun_id))

peru_mun_deaths = peru_mun_deaths_raw %>% 
  count(state,date,mun_id , name = "deaths") 


peru_mun_file_raw= full_join(peru_mun_cases,peru_mun_deaths)%>% 
  mutate_at(vars(confirmed, deaths),~ifelse(is.na(.x),0,.x)) %>% 
  rename(mun = mun_id) %>%
  mutate(date = ymd(as.character(date)))%>% 
  arrange(mun,date) %>% 
  group_by(state,mun) %>% 
  mutate(confirmed = cumsum(confirmed), deaths = cumsum(deaths)) %>% 
  ungroup()


peru_mun_file = peru_mun_file_raw %>%
  group_by(state, mun) %>% 
  group_modify(function(x,...){
    all_dates = tibble(date = seq(min(peru_mun_file_raw$date),
                                  max(peru_mun_file_raw$date),
                                  by = '1 day'))
    all_dates %>% 
      left_join(x) %>% 
      fill(-date, .direction = "down") %>% 
      mutate_if(is.numeric,~ifelse(is.na(.x),0,.x))
  }) %>% 
  ungroup()%>% 
  arrange(mun, date)

peru_mun_file %>% filter(mun%in%c("010101","010115")) %>% 
  ggplot(aes(date, deaths))+geom_line()+facet_wrap(~mun)

## Link data to make raw full 
# xwalk_sal_pe
# xwalk_peru_mun


raw_pe_state = peru_mun_file  %>% 
  group_by(mun,date) %>% 
  mutate(state = str_to_lower(state) ) %>% 
  ungroup()  %>% 
  rename(loc = state) %>% 
  group_by(loc,date) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% 
  ungroup() %>% 
  filter(!is.na(date)) %>% 
  select(date, loc, confirmed,deaths) %>% 
  arrange(loc, date) %>% 
  mutate(level = "state",
         country = "Peru")

# raw_pe_state %>% 
#   ggplot(aes(date, log(confirmed), col = loc))+geom_line()
# raw_pe_state %>% 
#   group_by(date) %>% 
#   summarize(confirmed = sum(confirmed)) %>% 
#   ungroup()%>% 
#   ggplot(aes(date, confirmed))+geom_line()+theme(legend.position = "none")

raw_pe_mun = peru_mun_file  %>% 
  left_join(xwalk_sal_pe) %>% 
  mutate(confirmed=as.integer(confirmed),
         deaths = as.integer(deaths)) %>% 
  mutate(country = "Peru",
         iso2c = "PE")%>% 
  arrange(mun, date)

raw_pe_l1 = raw_pe_mun  %>% 
  mutate(level = "L1") %>% 
  group_by(date, level,salid1, salid1_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths  = sum(deaths)) %>% 
  ungroup() %>% 
  arrange(salid1_name,date) %>% 
  mutate(salid1_name = ifelse(is.na(salid1),
                              "Peru Non-salurbal",
                              salid1_name),
         salid1 = ifelse(is.na(salid1),
                         paste0("PE","888"),
                         salid1)) %>% 
  left_join(pop_df %>% filter(level == "L1") %>% select(-level), 
            by = c("salid1"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))   %>% 
  rename(loc = salid1_name)%>% 
  arrange(loc, date)

raw_pe_l1%>% ggplot(aes(date, log(confirmed), col = loc))+geom_line()+theme(legend.position = "none")
raw_pe_l1 %>% group_by(date) %>% summarize(confirmed = sum(confirmed)) %>% 
  ungroup()%>% 
  ggplot(aes(date, confirmed))+geom_line()+theme(legend.position = "none")

raw_pe_l2 = raw_pe_mun  %>% 
  mutate(level = "L2") %>% 
  group_by(date, level,salid2, salid2_name, country) %>% 
  summarise(confirmed = sum(confirmed),
            deaths = sum(deaths)) %>% 
  ungroup() %>% 
  arrange(salid2_name,date) %>% 
  mutate(salid2_name = ifelse(is.na(salid2),
                              "Peru Non-salurbal",
                              salid2_name),
         salid2 = ifelse(is.na(salid2),
                         paste0("PE","888"),
                         salid2)) %>% 
  left_join(pop_df %>% filter(level == "L2") %>% select(-level), 
            by = c("salid2"="loc")) %>% 
  mutate(confirmed_rate = round((confirmed/pop)*10^6,2),
         deaths_rate = round((deaths/pop)*10^7,2))   %>% 
  rename(loc = salid2_name) %>% 
  arrange(loc, date)


raw_pe_l2 %>% filter(loc == "San Juan Bautista") %>% 
  ggplot(aes(date, log(confirmed)))+
  geom_line()+theme(legend.position = "none")

raw_pe_l2%>% 
  ggplot(aes(date, log(confirmed), col = loc))+
  geom_line()+theme(legend.position = "none")

raw_pe_l2 %>%
  group_by(date) %>% 
  summarize(confirmed = sum(confirmed)) %>% 
  ungroup()%>% 
  ggplot(aes(date, confirmed))+geom_line()+theme(legend.position = "none")

# Prepare Color Pallete
df.color.pe.state = expand_colors_df(raw_pe_state, "Dark2")%>% ungroup()
df.color.pe.l1  = expand_colors_df(raw_pe_l1, "Dark2")%>% ungroup()
df.color.pe.l2  = expand_colors_df(raw_pe_l2, "Dark2")%>% ungroup()

# Add color information 
full_pe_state = raw_pe_state %>% left_join(df.color.pe.state)%>% arrange(loc,date) %>% ungroup()
full_pe_l1 = raw_pe_l1 %>% left_join(df.color.pe.l1)%>% arrange(salid1,date) %>% ungroup()
full_pe_l2 = raw_pe_l2 %>% left_join(df.color.pe.l2)%>% arrange(salid2,date) %>% ungroup()


#### 7.2 -  cumulative Cases (df.c.co.l1,df.c.pe.l2) ####
df.c.pe.state = clean_salurbal_cumulative_cases(mutate(full_pe_state, deaths_rate = 0, deaths = 0),df.color.pe.state)
df.c.pe.l1 = clean_salurbal_cumulative_cases_with_rates(mutate(full_pe_l1, deaths_rate = 0, deaths = 0),df.color.pe.l1) %>% ungroup()
df.c.pe.l2 = clean_salurbal_cumulative_cases_with_rates(mutate(full_pe_l2, deaths_rate = 0, deaths = 0),df.color.pe.l2) %>% ungroup()



#### 7.3 -  cumulative Deaths (df.d.pe.l1,df.d.pe.l2) ####
df.d.pe.state = clean_salurbal_cumulative_deaths(full_pe_state,df.color.pe.state)
df.d.pe.l1 = clean_salurbal_cumulative_deaths_with_rates(full_pe_l1,df.color.pe.l1)%>% ungroup()
df.d.pe.l2 = clean_salurbal_cumulative_deaths_with_rates(full_pe_l2,df.color.pe.l2)%>% ungroup()

full_pe_l1 %>% filter(loc == "Lima") %>% 
  ggplot(aes(date, deaths))+geom_line()

#### 7.4 -  Sparkline (dt1_global_pe) ####
dt1_global_pe_state =  clean_salurbal_sparkline(full_pe_state)%>% ungroup() %>% mutate(level = "state")
dt1_global_pe_l1 =  clean_salurbal_sparkline_with_rates(full_pe_l1)%>% ungroup()%>% mutate(level = "L1")
dt1_global_pe_l2 =  clean_salurbal_sparkline_with_rates(full_pe_l2)%>% ungroup()%>% mutate(level = "L2")

#### 7.6 -  Daily ####
tidy.daily.pe.state = clean_daily_salurbal_smooth(full_pe_state) %>% ungroup() %>% mutate(level = "state")
tidy.daily.pe.l1 = clean_daily_salurbal_smooth(full_pe_l1)%>% ungroup()%>% mutate(level = "L1")
tidy.daily.pe.l2 = clean_daily_salurbal_smooth(full_pe_l2)%>% ungroup()%>% mutate(level = "L2")

# tidy.daily.pe.l1 %>% 
#   filter(loc == "Lima") %>% 
#   filter(smooth_days == 7) %>% 
#   ggplot(aes(date,rollsum ))+geom_line()+facet_wrap(~type)


#### ********************************************* ####
#### 8. Argentina (Micro) ####

#### 8.1 -  Get raw data  #####

#### ********************************************* ####


#### 12. Compile and Saving  ####

# dt1_global_cl_state %>% 
#   bind_rows(dt1_global_cl_l1 %>% select(names(dt1_global_cl_state)))
# dt1_global_cl_l1 %>% 
#   bind_rows(dt1_global_cl_state )

#### 12.1 -  dt1_global ####
dt_global_tmp = list(dt1_global_br_state ,
                     dt1_global_mx_state,
                     dt1_global_cl_state,
                     dt1_global_pe_state
) %>% 
  bind_rows()%>% 
  pivot_longer(cols = c(Deaths,Confirmed), 
               names_to = "type", values_to = "n") %>% 
  filter(!is.na(n)) %>% 
  pivot_longer(cols = c(spark_counts, spark_deaths), 
               names_to = "type2", values_to = "spark") %>% 
  filter(!is.na(spark)) 

dt1_global = list(dt1_global_national,
                  dt1_global_br_l2,
                  dt1_global_br_l1,
                  dt1_global_mx_l1,
                  dt1_global_mx_l2,
                  dt1_global_cl_l1,
                  dt1_global_cl_l2,
                  dt1_global_co_l1,
                  dt1_global_co_l2,
                  dt1_global_pe_l1,
                  dt1_global_pe_l2
) %>% 
  dplyr::bind_rows() %>% 
  pivot_longer(cols = c(Deaths,Confirmed,"Confirmed Rate","Death Rate"), 
               names_to = "type", values_to = "n") %>% 
  filter(!is.na(n)) %>% 
  pivot_longer(cols = c(spark_counts, spark_deaths,spark_counts_rate, spark_deaths_rate), 
               names_to = "type2", values_to = "spark") %>% 
  filter(!is.na(spark)) %>% 
  bind_rows(dt_global_tmp) %>% 
  select(level, country, type, type2, loc,n, spark) %>% 
  arrange(level, country, type, type2, loc) %>% 
  filter( (type == "Confirmed"&type2 == "spark_counts")|(type == "Deaths"&type2 == "spark_deaths")|(type == "Confirmed Rate"&type2 == "spark_counts_rate")|(type == "Death Rate"&type2 == "spark_deaths_rate") ) %>% 
  select(-type2) %>% 
  mutate(rate = ifelse(str_detect(type,"Rate"),"rate",'count')) %>% 
  mutate(type = ifelse(str_detect(type,"Confirmed"),"cases", "deaths")) %>% 
  mutate(n = round(n,0) %>% as.integer())






#### 12.2 -  df.c ####
df.c= list(df.c.country,
           df.c.br.state,
           df.c.br.l1,
           df.c.br.l2,
           df.c.mx.l1,
           df.c.mx.l2,
           df.c.mx.state,
           df.c.cl.state,
           df.c.cl.l1,
           df.c.cl.l2,
           df.c.co.l1,
           df.c.co.l2,
           df.c.pe.state,
           df.c.pe.l1,
           df.c.pe.l2
           #df.c.co.state
) %>% 
  bind_rows() %>% 
  select(-deaths) %>% 
  # mutate(title = case_when(
  #   level == "country"&rate=="count" ~"Confirmed Cases in the LAC Region (countries with >=100 cases)",
  #   level == "country"&rate=="rate"~"Confirmed Cases per 1 M in the LAC Region (countries with >=1 case per 1 M)",
  #   level == "state" ~paste0("Confirmed Cases in ",country," (states with >=100 cases)"),
  #   level == "L1"&rate=="rate" ~paste0("Confirmed Cases per 1 M  in ",country," (Cities with >=1 case per 1 M)"),
  #   level == "L1"&rate=="count" ~paste0("Confirmed Cases in ",country," (Cities with >=100 cases)"),
  #   level == "L2"&rate=="rate" ~paste0("Confirmed Cases per 1 M  in ",country," (Sub-cities with >=1 case per 1 M)"),
  #   level == "L2"&rate=="count" ~paste0("Confirmed Cases in ",country," (Sub-cities with >=100 cases)"))) %>% 
  mutate(title = case_when(
    level == "country"&rate=="count" ~"Confirmed Cases in the LAC Region",
    level == "country"&rate=="rate"~"Confirmed Cases per 1 M in the LAC Region",
    level == "state" ~paste0("Confirmed Cases in ",country),
    level == "L1"&rate=="rate" ~paste0("Confirmed Cases per 1 M  in ",country),
    level == "L1"&rate=="count" ~paste0("Confirmed Cases in ",country),
    level == "L2"&rate=="rate" ~paste0("Confirmed Cases per 1 M  in ",country),
    level == "L2"&rate=="count" ~paste0("Confirmed Cases in ",country))) %>% 
  mutate(subtitle = case_when(
    level == "country"&rate=="count" ~"Countries with >=100 cases",
    level == "country"&rate=="rate"~"Countries with >=1 case per 1 M",
    level == "state" ~" States with >=100 cases",
    level == "L1"&rate=="rate"&country=="Chile" ~"Cities with >=1000 case per 1 M",
    level == "L1"&rate=="rate" ~"Cities with >=10 case per 1 M",
    level == "L1"&rate=="count" ~"Cities with >=100 cases",
    level == "L2"&rate=="rate"&country=="Chile" ~"Cities with >=1000 case per 1 M",
    level == "L2"&rate=="rate" ~"Sub-cities with >=10 case per 1 M",
    level == "L2"&rate=="count" ~"Sub-cities with >=100 cases")
  ) %>% 
  mutate(rate = ifelse(level == "state","count",rate)) %>% 
  group_by(country, level,rate) %>% 
  mutate(y_start = str_sub(subtitle,str_locate(subtitle,"=")[2]+1,str_locate(subtitle,"=")[2]+5) %>% 
           str_sub(.,1,str_locate(.," ")[1]-1) %>% as.numeric()) %>% 
  ungroup()

df.c %>% count(level, country)




#paste("Confirmed Cases in the "" (countries with >=100 cases)")

#### 12.3 -  df.d ####
df.d= list(df.d.country,
           df.d.br.state,
           df.d.br.l1,
           df.d.br.l2,
           df.d.mx.state,
           df.d.mx.l1,
           df.d.mx.l2,
           df.d.cl.state,
           df.d.cl.l1,
           df.d.cl.l2,
           #df.d.co.state,
           df.d.co.l1,
           df.d.co.l2,
           df.d.pe.state,
           df.d.pe.l1,
           df.d.pe.l2
) %>% 
  bind_rows() %>% 
  mutate(title = case_when(
    level == "country"&rate=="count" ~"Deaths in the LAC Region",
    level == "country"&rate=="rate" ~"Deaths per 10 M in the LAC Region",
    level == "state" ~paste0("Deaths in ",country),
    level == "L1"&rate=="rate" ~paste0("Deaths per 10 M in ",country),
    level == "L1"&rate=="count" ~paste0("Deaths in ",country),
    level == "L2"&rate=="rate" ~paste0("Deaths per 10 M in ",country),
    level == "L2"&rate=="count" ~paste0("Deaths in ",country)))%>% 
  mutate(subtitle = case_when(
    level == "country"&rate=="count" ~"Countries with >=10 deaths",
    level == "country"&rate=="rate" ~"Countries with >=1 deaths per 10 M",
    level == "state" ~paste0("States with >=10 deaths"),
    level == "L1"&rate=="rate" ~"Cities with >=10 deaths per 10 M",
    level == "L1"&rate=="count" ~"Cities with >=10 deaths)",
    level == "L2"&rate=="rate" ~"Sub-cities with >=10 deaths per 10 M)",
    level == "L2"&rate=="count" ~"Sub-cities with >=10 deaths)"))%>% 
  mutate(rate = ifelse(level == "State","count",rate))%>% 
  group_by(country, level,rate) %>% 
  mutate(y_start = str_sub(subtitle,str_locate(subtitle,"=")[2]+1,str_locate(subtitle,"=")[2]+5) %>% 
           str_sub(.,1,str_locate(.," ")[1]-1) %>% as.numeric()) %>% 
  ungroup()
df.d %>% count(level, country,y_start)

#### 12.4 -  full ####
full_global =  list(full, 
                    full_br_state,
                    full_br_l1,
                    full_br_l2,
                    full_mx_state,
                    full_mx_l1,
                    full_mx_l2,
                    #full_co_state,
                    full_co_l1,
                    full_co_l2,
                    full_cl_state,
                    full_cl_l1,
                    full_cl_l2,
                    full_pe_state,
                    full_pe_l1,
                    full_pe_l2) %>% 
  bind_rows() %>% 
  pivot_longer(cols = c(deaths,confirmed,"confirmed_rate","deaths_rate"), 
               names_to = "rate", values_to = "n") %>% 
  filter(!is.na(n)) %>% 
  mutate(title = case_when(
    level == "country"~"in the LAC Region",
    level == "state" ~paste0("in ",country, " (State)"),
    level == "L1" ~paste0("in ",country, " (Cities)"),
    level == "L2" ~paste0("in ",country, " (Sub-Cities)"))) %>% 
  mutate(type = ifelse(str_detect(rate,"deaths"),"deaths","cases")) %>% 
  mutate(rate = ifelse(str_detect(rate,"rate"),"rate","count"))

#### 12.5 -  tidy.daily  ####
tidy.daily.subnational = list(tidy.daily.br.state,
                              tidy.daily.br.l1,
                              tidy.daily.br.l2,
                              tidy.daily.mx.state,
                              tidy.daily.mx.l1,
                              tidy.daily.mx.l2,
                              #tidy.daily.co.state,
                              tidy.daily.co.l1,
                              tidy.daily.co.l2,
                              tidy.daily.cl.state,
                              tidy.daily.pe.state,
                              tidy.daily.pe.l1,
                              tidy.daily.pe.l2
) %>% bind_rows() %>% 
  filter(smooth_days == 7) %>% 
  bind_rows(
    bind_rows(tidy.daily.cl.l1,
              tidy.daily.cl.l2) 
  ) 




#### 12.6 -  Choices: top and rest  ####

choices_df = dt1_global %>% 
  # filter(level%in%c("state")) %>% 
  # filter(country%in%c("Chile")) %>% 
  # filter(country=="Chile") %>% 
  group_by(rate,country,level,type) %>% 
  group_modify(function(x,...){
    subset_non = x %>% filter(str_detect(loc, "Non")) 
    #print(x$loc)
    if (nrow(subset_non)>0){
      br_non_sal_str=subset_non %>% pull(loc)
      df_tmp = x %>% filter(loc!=br_non_sal_str)
      top_1 = top10_tmp = df_tmp %>% arrange(desc(n)) %>% slice(1) %>% pull(loc) %>% sort()
      top10_tmp = df_tmp %>% arrange(desc(n)) %>% slice(1:10) %>% pull(loc) %>% sort()
      rest_tmp = df_tmp %>% arrange(desc(n)) %>% slice(11:n()) %>% pull(loc) %>% sort()
      tibble(top = c(rep("top",10),rep("rest",length(rest_tmp)),'non'),
             state = c(top10_tmp,rest_tmp,br_non_sal_str)) %>% 
        mutate(top1 = ifelse(state==top_1,"best","rest"))
    }
    else {
      #print("else")
      df_tmp = x 
      top_1 = top10_tmp = df_tmp %>% arrange(desc(n)) %>% slice(1) %>% pull(loc) %>% sort()
      top10_tmp = df_tmp %>% arrange(desc(n)) %>% slice(1:10) %>% pull(loc) %>% sort()
      rest_tmp = df_tmp %>% arrange(desc(n)) %>% slice(11:n()) %>% pull(loc) %>% sort()
      tibble(top = c(rep("top",10),rep("rest",length(rest_tmp))),
             state = c(top10_tmp,rest_tmp))  %>% 
        mutate(top1 = ifelse(state==top_1,"best","rest"))
    }
    #print("end")
  }) %>% 
  ungroup()


#### 12.7 -  Tidy data for download  ####

## SALID0 crosswalk
tidy.full_country  = full_global %>% 
  filter(level == "country") %>% 
  left_join(xwalk_salid0, by = c("loc" = "country")) %>% 
  select(type, level, rate,country, loc,date,n)


## Cumulative Data
tidy.full_l1 = full_global %>% 
  filter(level=="L1") %>% 
  select(type, level, rate,country, loc,salid = salid1,date,n) 

tidy.full_l2 = full_global %>% 
  filter(level=="L2") %>% 
  select(type, level, rate,country, loc,salid = salid2,date,n) 

tidy.full_state  = full_global %>% 
  filter(level == "state") %>% 
  select(type, level, rate,country, loc,date,n) 

tidy.cumulative = list(tidy.full_country,tidy.full_l1,tidy.full_l2,tidy.full_state) %>% 
  bind_rows() %>% 
  mutate(rate_cleaned = case_when(
    type =="cases"&rate=="rate"~"count per 1 M",
    type =="deaths"&rate=="rate"~"count per 10 M",
    TRUE~rate
  ) 
  ) %>% 
  mutate(level = case_when(
    level == "L1"~"city",
    level == "L2"~"sub-city",
    TRUE~level
  ))

## Daily Data

#fwrite(tidy.cumulative, "salurbal_covid19_cumulative_data.csv")

#### 12.8 - Map data at the L1 level  ####

## clean daily
map_daily_data_salurbal_l1_tmp = full_global %>% 
  filter(level == "L1") %>% 
  mutate(date_label = paste0(lubridate::month(date,label=T, abbr = T),", ",day(date))) %>% 
  mutate(rate2 = paste0(type,"_",rate)) %>% 
  select(-rate) %>% 
  select(loc, salid1,country, date, n,rate=rate2, date_label) %>% 
  mutate(rate = str_remove(rate,"_count")) %>% mutate(loc2 = paste(loc,",",country))

map_daily_data_salurbal_l1_tmp %>% 
  filter(country == "Brazil", rate =="deaths_rate", date == max(subset_dates_tmp))
# library(ggmap);register_google(key='AIzaSyAq5p9yGsRT8J3ePZRWYtTL5-apfgYT3aw')
# coords_google_l1 = map_daily_data_salurbal_l1_tmp %>% 
#   select(loc2) %>% 
#   distinct() %>%
#   filter(!str_detect(loc2,"Non-salurbal")) %>% 
#   mutate_geocode(loc2) %>% 
#   rename(lng = lon)
# save(coords_google_l1, file = "coords_google_l1.csv")

load("helper_files/coords_google_l1.csv")
all_dates_tmp = map_daily_data_salurbal_l1_tmp %>% 
  select(date, date_label) %>% 
  distinct() %>% 
  arrange(date)


map_daily_data_salurbal_l1_tmp2 = map_daily_data_salurbal_l1_tmp %>% 
  select(loc, salid1, country, rate, loc2) %>% 
  distinct() %>%
  mutate(date =list(all_dates_tmp)) %>% 
  unnest(cols = c(date))  %>% 
  left_join(map_daily_data_salurbal_l1_tmp) %>% 
  group_by(loc, salid1, country, rate, loc2) %>% 
  group_modify(function(x,...){
    first_date = x %>% filter(!is.na(n)) %>% pull(date) %>% min()
    x %>% 
      filter(date>=first_date) %>% 
      arrange(date) %>% 
      fill(n, .direction = "up") %>% 
      fill(n, .direction = "down")
  }) %>% 
  ungroup() %>% 
  left_join(coords_google_l1) %>% 
  filter(!is.na(lng)) %>% 
  mutate(rate = str_replace(rate,"cases","confirmed")) %>% 
  filter(date%in%subset_dates_tmp)
map_daily_data_salurbal_l1_tmp2 %>% 
  filter(country == "Brazil", rate =="deaths_rate", date == max(subset_dates_tmp)) 
min_radius = 2
map_daily_salurbal_radius = map_daily_data_salurbal_l1_tmp2 %>% 
  filter(date == max(date))%>% 
  group_by(date,rate) %>% 
  top_n(1,n) %>% 
  mutate(max_radius_tmp = ifelse(str_detect(rate,"rate"),
                                 20,
                                 20)) %>% 
  mutate(radius_factor = log(n)/log(max_radius_tmp)) %>% 
  ungroup() %>% 
  select(rate,radius_factor )

map_daily_data_salurbal_l1 = map_daily_data_salurbal_l1_tmp2 %>% 
  filter(n>0) %>% 
  mutate(log_n = log10(n))%>% 
  left_join(map_daily_salurbal_radius) %>% 
  mutate(radius = (n)^(1/radius_factor)) %>% 
  mutate(radius =ifelse(radius<min_radius,min_radius,radius)) 
map_daily_data_salurbal_l1 %>% 
  filter(country == "Brazil", rate =="deaths_rate", date == max(subset_dates_tmp)) 
df_map_data_raw = map_daily_data %>% 
  mutate(level = "country") %>% 
  bind_rows(
    map_daily_data_salurbal_l1 %>% 
      mutate(level = "L1")
  ) %>% 
  filter(loc!="Qatar")
df_map_data_raw %>% 
  filter(level == "L1",country == "Brazil", rate =="deaths_rate", date == max(subset_dates_tmp)) 
# .x = df_map_data %>% 
#   filter(level =="country", rate == "confirmed_rate", date == max(df_map_data$date) )
df_map_data=df_map_data_raw %>% 
  mutate(rate2 = ifelse(str_detect(rate,"rate"),"rate","count")) %>% 
  group_by(level, rate, date) %>% 
  group_modify(~{
    if (unique(.x$rate2)=="count"){.x %>% mutate(fill = NA)}
    else {
      sf_tmp = .x
      pal = colorNumeric("OrRd",
                         domain = sf_tmp$n, 
                         reverse = F)
      .x %>% mutate(fill = pal(n))
    }
  }) %>% 
  ungroup() %>% 
  select(-rate2)
df_map_data_raw %>% 
  filter(level == "L1",country == "Brazil", rate =="deaths_rate", date == max(subset_dates_tmp)) 
#### 12.9 - Shape Files  ####

library("rnaturalearth")
library("rnaturalearthdata")
library(rmapshaper)

sf_world_raw <- ne_countries(scale = "medium", returnclass = "sf") %>% 
  select(loc = name) %>% 
  mutate(loc = case_when(
    loc == "Antigua and Barb."~"Antigua and Barbuda",
    loc == "Cape Verde"~"Cabo Verde",
    loc == "Korea"~"Korea, South",
    loc == "Dominican Rep."~"Dominican Republic",
    loc == "Taiwan"~"Taiwan*",
    loc == "United States"~"US",
    TRUE~loc
  ))

sf_world = sf_world_raw %>% ms_simplify(keep= 0.05)

load("salurbal_l1_sf.rdata")
salurbal_l1_sf= ms_simplify(salurbal_l1_sf, keep = 0.05) %>% 
  mutate(country = ifelse(country == "Brasil","Brazil",country))


load("sf_salurbal_0.8.rdata")
sf_salurbal_0.8 = sf_salurbal_0.8 %>% 
  mutate(country = ifelse(country == "Brasil","Brazil",country))

#### ********************************************* ####
#### 13. Saving Rdata (covid19_processed_data.rdata) ####

tidy.daily = tidy.daily.country %>% 
  select(level,country, type, loc, date, rollsum, rate,start, end) %>% 
  bind_rows(tidy.daily.subnational %>% 
              select(level,country, type, loc, salid,date, rollsum, rate)) %>% 
  pivot_longer(cols = c(rollsum,rate),names_to = "rate") %>% 
  mutate(value = ifelse(type == "deaths"&rate == "rate",value*10, value)) %>% 
  mutate(value = round(value,0)) %>% 
  mutate(ylabs = case_when(type =="confirmed"&rate=="rollsum"~"New Cases",
                             type =="confirmed"&rate=="rate"~"New Cases per 1M",
                             type =="deaths"&rate=="rollsum"~"New Deaths",
                             type =="deaths"&rate=="rate"~"New Deaths per 10M")) %>% 
  mutate(title = case_when(
    level =="country"~paste("Daily",ylabs,"in the LAC Region" ),
    level == "state"~paste("Daily",ylabs,"in States of",country),
    level == "L1"~paste("Daily",ylabs,"in Cities of",country),
    level == "L2"~paste("Daily",ylabs,"in Sub-Cities of",country)
  )) %>% 
  mutate(rate = ifelse(rate == "rollsum","count",rate))  %>% 
  mutate(rate_cleaned = case_when(
    type =="confirmed"&rate=="rate"~"count per 1 M",
    type =="deaths"&rate=="rate"~"count per 10 M",
    TRUE~rate
  )) %>% 
  select(-start, -end)

tidy.daily.data = tidy.daily %>% 
  select(level, country, type, rate, salid, loc, date, value) %>% 
  filter(level%in%c("L1","L2"))

tidy.cumulative.data = tidy.cumulative %>%
  mutate(level = case_when(
    level == "city"~"L1",
    level == "sub-city"~"L2",
    TRUE~level
  )) %>% 
  select(level, country,type, rate, salid, loc, date, value = n)%>% 
  filter(level%in%c("L1","L2"))

fwrite(tidy.daily.data, "../Outputs/salurbal_daily_covid19_L1-L2.csv")
fwrite(tidy.cumulative.data, "../Outputs/salurbal_cumulative_covid19_L1-L2.csv")


save(
  # global variables
  countries_salurbal,other_central_countries,other_south_countries,
  other_carribean_countries,other_lac_countries,lac_countries,minc,mind,
  countries_references,countries_interest,col_rolling,
  country_coords,
  lockdown_legend,lock.dates.state,
  doubling_legend,
  # For map
  sf_world,salurbal_l1_sf,sf_salurbal_0.8,
  df_map_data,map_global_totals,subset_dates_tmp,
  tidy.cumulative,
  tidy.daily,
  choices_df,
  file = "../../SALURBAL Covid19 Project/covid19_salurbal_v19/covid19_processed_data_v2.rdata")


save(
  # global variables
  countries_salurbal,other_central_countries,other_south_countries,
  other_carribean_countries,other_lac_countries,lac_countries,minc,mind,
  countries_references,countries_interest,col_rolling,
  country_coords,
  lockdown_legend,lock.dates.state,
  doubling_legend,
  # For map
  sf_world,salurbal_l1_sf,sf_salurbal_0.8,
  df_map_data,map_global_totals,subset_dates_tmp,
  tidy.cumulative,
  tidy.daily,
  choices_df,
  file = "../Clean/covid19_processed_data_v2.rdata")


# tidy.daily %>% filter(country == "Chile",
#                       level == "L1",
#                       rate == "rate")  

